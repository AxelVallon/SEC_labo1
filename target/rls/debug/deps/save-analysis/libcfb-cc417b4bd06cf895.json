{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1","program":"C:\\Users\\axelv\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","cfb","--edition=2018","C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=cc417b4bd06cf895","-C","extra-filename=-cc417b4bd06cf895","--out-dir","c:\\Users\\axelv\\projets\\Semestre6\\CAA\\lab01_2022_input_validation\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\axelv\\projets\\Semestre6\\CAA\\lab01_2022_input_validation\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\axelv\\projets\\Semestre6\\CAA\\lab01_2022_input_validation\\target\\rls\\debug\\deps\\libbyteorder-de9462f2bcbc4c56.rmeta","--extern","uuid=c:\\Users\\axelv\\projets\\Semestre6\\CAA\\lab01_2022_input_validation\\target\\rls\\debug\\deps\\libuuid-b36b2198f7411764.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\axelv\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\axelv\\projets\\Semestre6\\CAA\\lab01_2022_input_validation\\target\\rls\\debug\\deps\\libcfb-cc417b4bd06cf895.rmeta"},"prelude":{"crate_id":{"name":"cfb","disambiguator":[17646239788002049595,0]},"crate_root":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src","external_crates":[{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2135196546772561304,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10100063161427464349,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18166920060419810902,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8277429635966420526,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1216845600797868778,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4668287356885333314,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8817118394831127109,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8504866355990175305,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13162136604145443950,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12752153024841339346,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14912306932249625247,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13614144605518827024,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12294374008152043540,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":14,"id":{"name":"byteorder","disambiguator":[2094882216424896990,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":15,"id":{"name":"uuid","disambiguator":[5983049763251444309,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":16,"id":{"name":"sha1","disambiguator":[4716416872828327408,0]}},{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","num":17,"id":{"name":"sha1_smol","disambiguator":[4360621175448222859,0]}}],"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":0,"byte_end":52088,"line_start":1,"line_end":1343,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2035,"byte_end":2042,"line_start":53,"line_end":53,"column_start":27,"column_end":34},"alias_span":null,"name":"Entries","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2044,"byte_end":2049,"line_start":53,"line_end":53,"column_start":36,"column_end":41},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2051,"byte_end":2058,"line_start":53,"line_end":53,"column_start":43,"column_end":50},"alias_span":null,"name":"Version","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":0,"byte_end":52088,"line_start":1,"line_end":1343,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":929},{"krate":0,"index":934},{"krate":0,"index":938},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":993},{"krate":0,"index":1001},{"krate":0,"index":1006},{"krate":0,"index":1011},{"krate":0,"index":1015},{"krate":0,"index":1019},{"krate":0,"index":1024},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1033}],"decl_id":null,"docs":" A library for reading/writing [Compound File Binary](\n https://en.wikipedia.org/wiki/Compound_File_Binary_Format) (structured\n storage) files.  See [MS-CFB](\n https://msdn.microsoft.com/en-us/library/dd942138.aspx) for the format\n specification.","sig":null,"attributes":[{"value":"/ A library for reading/writing [Compound File Binary](","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":0,"byte_end":57,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"/ https://en.wikipedia.org/wiki/Compound_File_Binary_Format) (structured","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":58,"byte_end":132,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"/ storage) files.  See [MS-CFB](","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":133,"byte_end":167,"line_start":3,"line_end":3,"column_start":1,"column_end":35}},{"value":"/ https://msdn.microsoft.com/en-us/library/dd942138.aspx) for the format","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":168,"byte_end":242,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ specification.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":243,"byte_end":261,"line_start":5,"line_end":5,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":262,"byte_end":265,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ A Compound File Binary (CFB) file, also called a *structured storage file*","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":266,"byte_end":344,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ or simply a *compound file*, is a bit like a simple file system within a","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":345,"byte_end":421,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ file.  A compound file contains a tree of *storage* objects","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":422,"byte_end":485,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ (i.e. directories), each of which can contain *stream* objects (i.e. files)","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":486,"byte_end":565,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ or other storage objects.  The format is designed to allow reasonably","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":566,"byte_end":639,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ efficient in-place mutation and resizing of these stream and storage","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":640,"byte_end":712,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ objects, without having to completely rewrite the CFB file on disk.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":713,"byte_end":784,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":785,"byte_end":788,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":789,"byte_end":808,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":809,"byte_end":812,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":813,"byte_end":826,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/ use cfb;","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":827,"byte_end":839,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ use std::io::{Read, Seek, SeekFrom, Write};","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":840,"byte_end":887,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":888,"byte_end":891,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Open an existing compound file in read-write mode.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":892,"byte_end":949,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ let mut comp = cfb::open_rw(\"path/to/cfb/file\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":950,"byte_end":1011,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1012,"byte_end":1015,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Read in all the data from one of the streams in that compound file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1016,"byte_end":1090,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ let data = {","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1091,"byte_end":1107,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"/     let mut stream = comp.open_stream(\"/foo/bar\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1108,"byte_end":1171,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/     let mut buffer = Vec::new();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1172,"byte_end":1208,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/     stream.read_to_end(&mut buffer).unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1209,"byte_end":1258,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/     buffer","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1259,"byte_end":1273,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/ };","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1274,"byte_end":1280,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1281,"byte_end":1284,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Append that data to the end of another stream in the same file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1285,"byte_end":1355,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ {","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1356,"byte_end":1361,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/     let mut stream = comp.open_stream(\"/baz\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1362,"byte_end":1421,"line_start":34,"line_end":34,"column_start":1,"column_end":60}},{"value":"/     stream.seek(SeekFrom::End(0)).unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1422,"byte_end":1469,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/     stream.write_all(&data).unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1470,"byte_end":1511,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1512,"byte_end":1517,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1518,"byte_end":1521,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Now create a new compound file, and create a new stream with the data.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1522,"byte_end":1599,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ let mut comp2 = cfb::create(\"some/other/path\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1600,"byte_end":1660,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ comp2.create_storage(\"/spam/\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1661,"byte_end":1705,"line_start":41,"line_end":41,"column_start":1,"column_end":45}},{"value":"/ let mut stream = comp2.create_stream(\"/spam/eggs\").unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1706,"byte_end":1770,"line_start":42,"line_end":42,"column_start":1,"column_end":65}},{"value":"/ stream.write_all(&data).unwrap();","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1771,"byte_end":1808,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1809,"byte_end":1816,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":1818,"byte_end":1840,"line_start":46,"line_end":46,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119224,"byte_end":119229,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Entry","qualname":"::internal::entry::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075}],"decl_id":null,"docs":" Metadata about a single object (storage or stream) in a compound file.\n","sig":null,"attributes":[{"value":"/ Metadata about a single object (storage or stream) in a compound file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119121,"byte_end":119195,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119930,"byte_end":119934,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"name","qualname":"<Entry>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the object that this entry represents.\n","sig":null,"attributes":[{"value":"/ Returns the name of the object that this entry represents.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119856,"byte_end":119918,"line_start":35,"line_end":35,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120061,"byte_end":120065,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"path","qualname":"<Entry>::path","value":"pub fn path(&Self) -> &Path","parent":null,"children":[],"decl_id":null,"docs":" Returns the full path to the object that this entry represents.\n","sig":null,"attributes":[{"value":"/ Returns the full path to the object that this entry represents.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119982,"byte_end":120049,"line_start":40,"line_end":40,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120229,"byte_end":120238,"line_start":47,"line_end":47,"column_start":12,"column_end":21},"name":"is_stream","qualname":"<Entry>::is_stream","value":"pub fn is_stream(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this entry is for a stream object (i.e. a \"file\" within\n the compound file).\n","sig":null,"attributes":[{"value":"/ Returns whether this entry is for a stream object (i.e. a \"file\" within","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120114,"byte_end":120189,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ the compound file).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120194,"byte_end":120217,"line_start":46,"line_end":46,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120466,"byte_end":120476,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"is_storage","qualname":"<Entry>::is_storage","value":"pub fn is_storage(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this entry is for a storage object (i.e. a \"directory\"\n within the compound file), either the root or a nested storage.\n","sig":null,"attributes":[{"value":"/ Returns whether this entry is for a storage object (i.e. a \"directory\"","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120308,"byte_end":120382,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ within the compound file), either the root or a nested storage.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120387,"byte_end":120454,"line_start":52,"line_end":52,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120697,"byte_end":120704,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"is_root","qualname":"<Entry>::is_root","value":"pub fn is_root(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this entry is specifically for the root storage object\n of the compound file.\n","sig":null,"attributes":[{"value":"/ Returns whether this entry is specifically for the root storage object","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120581,"byte_end":120655,"line_start":57,"line_end":57,"column_start":5,"column_end":79}},{"value":"/ of the compound file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120660,"byte_end":120685,"line_start":58,"line_end":58,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120856,"byte_end":120859,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"len","qualname":"<Entry>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the size, in bytes, of the stream that this metadata is for.\n","sig":null,"attributes":[{"value":"/ Returns the size, in bytes, of the stream that this metadata is for.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120772,"byte_end":120844,"line_start":63,"line_end":63,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121052,"byte_end":121057,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"clsid","qualname":"<Entry>::clsid","value":"pub fn clsid(&Self) -> &Uuid","parent":null,"children":[],"decl_id":null,"docs":" Returns the CLSID (that is, the object class GUID) for this object.\n This will always be all zeros for stream objects.\n","sig":null,"attributes":[{"value":"/ Returns the CLSID (that is, the object class GUID) for this object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120911,"byte_end":120982,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ This will always be all zeros for stream objects.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":120987,"byte_end":121040,"line_start":69,"line_end":69,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121177,"byte_end":121187,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"state_bits","qualname":"<Entry>::state_bits","value":"pub fn state_bits(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the user-defined bitflags set for this object.\n","sig":null,"attributes":[{"value":"/ Returns the user-defined bitflags set for this object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121107,"byte_end":121165,"line_start":74,"line_end":74,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121335,"byte_end":121342,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"created","qualname":"<Entry>::created","value":"pub fn created(&Self) -> SystemTime","parent":null,"children":[],"decl_id":null,"docs":" Returns the time when the object that this entry represents was\n created.\n","sig":null,"attributes":[{"value":"/ Returns the time when the object that this entry represents was","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121239,"byte_end":121306,"line_start":79,"line_end":79,"column_start":5,"column_end":72}},{"value":"/ created.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121311,"byte_end":121323,"line_start":80,"line_end":80,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121550,"byte_end":121558,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"modified","qualname":"<Entry>::modified","value":"pub fn modified(&Self) -> SystemTime","parent":null,"children":[],"decl_id":null,"docs":" Returns the time when the object that this entry represents was last\n modified.\n","sig":null,"attributes":[{"value":"/ Returns the time when the object that this entry represents was last","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121448,"byte_end":121520,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"/ modified.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121525,"byte_end":121538,"line_start":86,"line_end":86,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121986,"byte_end":121993,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"Entries","qualname":"::internal::entry::Entries","value":"Entries {  }","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"decl_id":null,"docs":" An iterator over the entries in a storage object.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries in a storage object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":121921,"byte_end":121974,"line_start":102,"line_end":102,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185114,"byte_end":185116,"line_start":9,"line_end":9,"column_start":5,"column_end":7},"name":"V3","qualname":"::internal::version::Version::V3","value":"Version::V3","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Version 3, which uses 512-byte sectors.\n","sig":null,"attributes":[{"value":"/ Version 3, which uses 512-byte sectors.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185066,"byte_end":185109,"line_start":8,"line_end":8,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185171,"byte_end":185173,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"V4","qualname":"::internal::version::Version::V4","value":"Version::V4","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Version 4, which uses 4096-byte sectors.\n","sig":null,"attributes":[{"value":"/ Version 4, which uses 4096-byte sectors.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185122,"byte_end":185166,"line_start":10,"line_end":10,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185052,"byte_end":185059,"line_start":7,"line_end":7,"column_start":10,"column_end":17},"name":"Version","qualname":"::internal::version::Version","value":"pub enum Version { V3, V4, }","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1127}],"decl_id":null,"docs":" The CFB format version to use.\n","sig":null,"attributes":[{"value":"/ The CFB format version to use.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":184940,"byte_end":184974,"line_start":5,"line_end":5,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185278,"byte_end":185289,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"from_number","qualname":"<Version>::from_number","value":"pub fn from_number(u16) -> Option<Version>","parent":null,"children":[],"decl_id":null,"docs":" Returns the version enum for the given version number, or `None`.\n","sig":null,"attributes":[{"value":"/ Returns the version enum for the given version number, or `None`.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185197,"byte_end":185266,"line_start":15,"line_end":15,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185523,"byte_end":185529,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"number","qualname":"<Version>::number","value":"pub fn number(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the version number for this version.\n","sig":null,"attributes":[{"value":"/ Returns the version number for this version.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185463,"byte_end":185511,"line_start":24,"line_end":24,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185709,"byte_end":185721,"line_start":33,"line_end":33,"column_start":12,"column_end":24},"name":"sector_shift","qualname":"<Version>::sector_shift","value":"pub fn sector_shift(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the sector shift used in this version.\n","sig":null,"attributes":[{"value":"/ Returns the sector shift used in this version.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185647,"byte_end":185697,"line_start":32,"line_end":32,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186110,"byte_end":186120,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"sector_len","qualname":"<Version>::sector_len","value":"pub fn sector_len(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of sectors used in this version.","sig":null,"attributes":[{"value":"/ Returns the length of sectors used in this version.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185882,"byte_end":185937,"line_start":40,"line_end":40,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185942,"byte_end":185945,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185950,"byte_end":185957,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use cfb::Version;","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185962,"byte_end":185983,"line_start":43,"line_end":43,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(Version::V3.sector_len(), 512);","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185988,"byte_end":186034,"line_start":44,"line_end":44,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(Version::V4.sector_len(), 4096);","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186039,"byte_end":186086,"line_start":45,"line_end":45,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186091,"byte_end":186098,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186277,"byte_end":186292,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"name":"stream_len_mask","qualname":"<Version>::stream_len_mask","value":"pub fn stream_len_mask(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the bitmask used for reading stream lengths in this version.\n","sig":null,"attributes":[{"value":"/ Returns the bitmask used for reading stream lengths in this version.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186193,"byte_end":186265,"line_start":51,"line_end":51,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186519,"byte_end":186541,"line_start":60,"line_end":60,"column_start":12,"column_end":34},"name":"dir_entries_per_sector","qualname":"<Version>::dir_entries_per_sector","value":"pub fn dir_entries_per_sector(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of directory entries per sector in this version.\n","sig":null,"attributes":[{"value":"/ Returns the number of directory entries per sector in this version.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":186436,"byte_end":186507,"line_start":59,"line_end":59,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2454,"byte_end":2458,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"open","qualname":"::open","value":"pub fn open<P: AsRef<Path>>(P) -> io::Result<CompoundFile<fs::File>>","parent":null,"children":[],"decl_id":null,"docs":" Opens an existing compound file at the given path in read-only mode.\n","sig":null,"attributes":[{"value":"/ Opens an existing compound file at the given path in read-only mode.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2374,"byte_end":2446,"line_start":66,"line_end":66,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2654,"byte_end":2661,"line_start":72,"line_end":72,"column_start":8,"column_end":15},"name":"open_rw","qualname":"::open_rw","value":"pub fn open_rw<P: AsRef<Path>>(P) -> io::Result<CompoundFile<fs::File>>","parent":null,"children":[],"decl_id":null,"docs":" Opens an existing compound file at the given path in read-write mode.\n","sig":null,"attributes":[{"value":"/ Opens an existing compound file at the given path in read-write mode.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2573,"byte_end":2646,"line_start":71,"line_end":71,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3174,"byte_end":3180,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"create","qualname":"::create","value":"pub fn create<P: AsRef<Path>>(P) -> io::Result<CompoundFile<fs::File>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compound file with no contents at the given path.","sig":null,"attributes":[{"value":"/ Creates a new compound file with no contents at the given path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":2947,"byte_end":3014,"line_start":81,"line_end":81,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3015,"byte_end":3018,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ The returned `CompoundFile` object will be both readable and writable.  If","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3019,"byte_end":3097,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ a file already exists at the given path, this will overwrite it.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3098,"byte_end":3166,"line_start":84,"line_end":84,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3838,"byte_end":3850,"line_start":104,"line_end":104,"column_start":12,"column_end":24},"name":"CompoundFile","qualname":"::CompoundFile","value":"CompoundFile {  }","parent":null,"children":[{"krate":0,"index":907}],"decl_id":null,"docs":" A compound file, backed by an underlying reader/writer (such as a\n [`File`](https://doc.rust-lang.org/std/fs/struct.File.html) or\n [`Cursor`](https://doc.rust-lang.org/std/io/struct.Cursor.html)).\n","sig":null,"attributes":[{"value":"/ A compound file, backed by an underlying reader/writer (such as a","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3620,"byte_end":3689,"line_start":101,"line_end":101,"column_start":1,"column_end":70}},{"value":"/ [`File`](https://doc.rust-lang.org/std/fs/struct.File.html) or","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3690,"byte_end":3756,"line_start":102,"line_end":102,"column_start":1,"column_end":67}},{"value":"/ [`Cursor`](https://doc.rust-lang.org/std/io/struct.Cursor.html)).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3757,"byte_end":3826,"line_start":103,"line_end":103,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3997,"byte_end":4004,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"version","qualname":"<CompoundFile<F>>::version","value":"pub fn version(&Self) -> Version","parent":null,"children":[],"decl_id":null,"docs":" Returns the CFB format version used for this compound file.\n","sig":null,"attributes":[{"value":"/ Returns the CFB format version used for this compound file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3922,"byte_end":3985,"line_start":109,"line_end":109,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4350,"byte_end":4360,"line_start":120,"line_end":120,"column_start":12,"column_end":22},"name":"root_entry","qualname":"<CompoundFile<F>>::root_entry","value":"pub fn root_entry(&Self) -> Entry","parent":null,"children":[],"decl_id":null,"docs":" Returns information about the root storage object.  This is equivalent\n to `self.entry(\"/\").unwrap()` (but always succeeds).\n","sig":null,"attributes":[{"value":"/ Returns information about the root storage object.  This is equivalent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4203,"byte_end":4277,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ to `self.entry(\"/\").unwrap()` (but always succeeds).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4282,"byte_end":4338,"line_start":119,"line_end":119,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4577,"byte_end":4582,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"entry","qualname":"<CompoundFile<F>>::entry","value":"pub fn entry<P: AsRef<Path>>(&Self, P) -> io::Result<Entry>","parent":null,"children":[],"decl_id":null,"docs":" Given a path within the compound file, get information about that\n stream or storage object.\n","sig":null,"attributes":[{"value":"/ Given a path within the compound file, get information about that","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4462,"byte_end":4531,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/ stream or storage object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":4536,"byte_end":4565,"line_start":125,"line_end":125,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5326,"byte_end":5343,"line_start":143,"line_end":143,"column_start":12,"column_end":29},"name":"read_root_storage","qualname":"<CompoundFile<F>>::read_root_storage","value":"pub fn read_root_storage(&Self) -> Entries","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the entries within the root storage object.\n This is equivalent to `self.read_storage(\"/\").unwrap()` (but always\n succeeds).\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the entries within the root storage object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5147,"byte_end":5219,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ This is equivalent to `self.read_storage(\"/\").unwrap()` (but always","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5224,"byte_end":5295,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ succeeds).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5300,"byte_end":5314,"line_start":142,"line_end":142,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5498,"byte_end":5510,"line_start":148,"line_end":148,"column_start":12,"column_end":24},"name":"read_storage","qualname":"<CompoundFile<F>>::read_storage","value":"pub fn read_storage<P: AsRef<Path>>(&Self, P) -> io::Result<Entries>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the entries within a storage object.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the entries within a storage object.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5421,"byte_end":5486,"line_start":147,"line_end":147,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5944,"byte_end":5948,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"walk","qualname":"<CompoundFile<F>>::walk","value":"pub fn walk(&Self) -> Entries","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all entries within the compound file, starting\n from and including the root entry.  The iterator walks the storage tree\n in a preorder traversal.  This is equivalent to\n `self.walk_storage(\"/\").unwrap()` (but always succeeds).\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all entries within the compound file, starting","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5656,"byte_end":5731,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ from and including the root entry.  The iterator walks the storage tree","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5736,"byte_end":5811,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ in a preorder traversal.  This is equivalent to","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5816,"byte_end":5867,"line_start":157,"line_end":157,"column_start":5,"column_end":56}},{"value":"/ `self.walk_storage(\"/\").unwrap()` (but always succeeds).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":5872,"byte_end":5932,"line_start":158,"line_end":158,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6198,"byte_end":6210,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"walk_storage","qualname":"<CompoundFile<F>>::walk_storage","value":"pub fn walk_storage<P: AsRef<Path>>(&Self, P) -> io::Result<Entries>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all entries under a storage subtree, including\n the given path itself.  The iterator walks the storage tree in a\n preorder traversal.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all entries under a storage subtree, including","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6010,"byte_end":6085,"line_start":163,"line_end":163,"column_start":5,"column_end":80}},{"value":"/ the given path itself.  The iterator walks the storage tree in a","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6090,"byte_end":6158,"line_start":164,"line_end":164,"column_start":5,"column_end":73}},{"value":"/ preorder traversal.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6163,"byte_end":6186,"line_start":165,"line_end":165,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6493,"byte_end":6499,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"exists","qualname":"<CompoundFile<F>>::exists","value":"pub fn exists<P: AsRef<Path>>(&Self, P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there is an existing stream or storage at the given\n path, or false if there is nothing at that path.\n","sig":null,"attributes":[{"value":"/ Returns true if there is an existing stream or storage at the given","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6353,"byte_end":6424,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ path, or false if there is nothing at that path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6429,"byte_end":6481,"line_start":174,"line_end":174,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6876,"byte_end":6885,"line_start":184,"line_end":184,"column_start":12,"column_end":21},"name":"is_stream","qualname":"<CompoundFile<F>>::is_stream","value":"pub fn is_stream<P: AsRef<Path>>(&Self, P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there is an existing stream at the given path, or false\n if there is a storage or nothing at that path.\n","sig":null,"attributes":[{"value":"/ Returns true if there is an existing stream at the given path, or false","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6734,"byte_end":6809,"line_start":182,"line_end":182,"column_start":5,"column_end":80}},{"value":"/ if there is a storage or nothing at that path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":6814,"byte_end":6864,"line_start":183,"line_end":183,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":7468,"byte_end":7478,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"is_storage","qualname":"<CompoundFile<F>>::is_storage","value":"pub fn is_storage<P: AsRef<Path>>(&Self, P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there is an existing storage at the given path, or\n false if there is a stream or nothing at that path.\n","sig":null,"attributes":[{"value":"/ Returns true if there is an existing storage at the given path, or","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":7326,"byte_end":7396,"line_start":197,"line_end":197,"column_start":5,"column_end":75}},{"value":"/ false if there is a stream or nothing at that path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":7401,"byte_end":7456,"line_start":198,"line_end":198,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8064,"byte_end":8074,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CompoundFile<F>>::into_inner","value":"pub fn into_inner(Self) -> F","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `CompoundFile`, returning the underlying reader/writer.\n","sig":null,"attributes":[{"value":"/ Consumes the `CompoundFile`, returning the underlying reader/writer.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":7980,"byte_end":8052,"line_start":216,"line_end":216,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8315,"byte_end":8326,"line_start":225,"line_end":225,"column_start":12,"column_end":23},"name":"open_stream","qualname":"<CompoundFile<F>>::open_stream","value":"pub fn open_stream<P: AsRef<Path>>(&mut Self, P) -> io::Result<Stream<, F>>","parent":null,"children":[],"decl_id":null,"docs":" Opens an existing stream in the compound file for reading and/or\n writing (depending on what the underlying file supports).\n","sig":null,"attributes":[{"value":"/ Opens an existing stream in the compound file for reading and/or","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8169,"byte_end":8237,"line_start":223,"line_end":223,"column_start":5,"column_end":73}},{"value":"/ writing (depending on what the underlying file supports).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8242,"byte_end":8303,"line_start":224,"line_end":224,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9310,"byte_end":9314,"line_start":250,"line_end":250,"column_start":12,"column_end":16},"name":"open","qualname":"<CompoundFile<F>>::open","value":"pub fn open(F) -> io::Result<CompoundFile<F>>","parent":null,"children":[],"decl_id":null,"docs":" Opens an existing compound file, using the underlying reader.  If the\n underlying reader also supports the `Write` trait, then the\n `CompoundFile` object will be writable as well.\n","sig":null,"attributes":[{"value":"/ Opens an existing compound file, using the underlying reader.  If the","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9101,"byte_end":9174,"line_start":247,"line_end":247,"column_start":5,"column_end":78}},{"value":"/ underlying reader also supports the `Write` trait, then the","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9179,"byte_end":9242,"line_start":248,"line_end":248,"column_start":5,"column_end":68}},{"value":"/ `CompoundFile` object will be writable as well.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9247,"byte_end":9298,"line_start":249,"line_end":249,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":18004,"byte_end":18010,"line_start":470,"line_end":470,"column_start":12,"column_end":18},"name":"create","qualname":"<CompoundFile<F>>::create","value":"pub fn create(F) -> io::Result<CompoundFile<F>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compound file with no contents, using the underlying\n reader/writer.  The reader/writer should be initially empty.\n","sig":null,"attributes":[{"value":"/ Creates a new compound file with no contents, using the underlying","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":17853,"byte_end":17923,"line_start":468,"line_end":468,"column_start":5,"column_end":75}},{"value":"/ reader/writer.  The reader/writer should be initially empty.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":17928,"byte_end":17992,"line_start":469,"line_end":469,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":18285,"byte_end":18304,"line_start":476,"line_end":476,"column_start":12,"column_end":31},"name":"create_with_version","qualname":"<CompoundFile<F>>::create_with_version","value":"pub fn create_with_version(Version, F) -> io::Result<CompoundFile<F>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compound file of the given version with no contents,\n using the underlying writer.  The writer should be initially empty.\n","sig":null,"attributes":[{"value":"/ Creates a new compound file of the given version with no contents,","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":18127,"byte_end":18197,"line_start":474,"line_end":474,"column_start":5,"column_end":75}},{"value":"/ using the underlying writer.  The writer should be initially empty.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":18202,"byte_end":18273,"line_start":475,"line_end":475,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":20557,"byte_end":20571,"line_start":533,"line_end":533,"column_start":12,"column_end":26},"name":"create_storage","qualname":"<CompoundFile<F>>::create_storage","value":"pub fn create_storage<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty storage object (i.e. \"directory\") at the provided\n path.  The parent storage object must already exist.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty storage object (i.e. \"directory\") at the provided","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":20410,"byte_end":20484,"line_start":531,"line_end":531,"column_start":5,"column_end":79}},{"value":"/ path.  The parent storage object must already exist.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":20489,"byte_end":20545,"line_start":532,"line_end":532,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22209,"byte_end":22227,"line_start":575,"line_end":575,"column_start":12,"column_end":30},"name":"create_storage_all","qualname":"<CompoundFile<F>>::create_storage_all","value":"pub fn create_storage_all<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Recursively creates a storage and all of its parent storages if they\n are missing.\n","sig":null,"attributes":[{"value":"/ Recursively creates a storage and all of its parent storages if they","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22104,"byte_end":22176,"line_start":573,"line_end":573,"column_start":5,"column_end":77}},{"value":"/ are missing.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22181,"byte_end":22197,"line_start":574,"line_end":574,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22969,"byte_end":22983,"line_start":597,"line_end":597,"column_start":12,"column_end":26},"name":"remove_storage","qualname":"<CompoundFile<F>>::remove_storage","value":"pub fn remove_storage<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Removes the storage object at the provided path.  The storage object\n must exist and have no children.\n","sig":null,"attributes":[{"value":"/ Removes the storage object at the provided path.  The storage object","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22844,"byte_end":22916,"line_start":595,"line_end":595,"column_start":5,"column_end":77}},{"value":"/ must exist and have no children.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":22921,"byte_end":22957,"line_start":596,"line_end":596,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":24462,"byte_end":24480,"line_start":633,"line_end":633,"column_start":12,"column_end":30},"name":"remove_storage_all","qualname":"<CompoundFile<F>>::remove_storage_all","value":"pub fn remove_storage_all<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Recursively removes a storage and all of its children.  If called on\n the root storage, recursively removes all of its children but not the\n root storage itself (which cannot be removed).\n","sig":null,"attributes":[{"value":"/ Recursively removes a storage and all of its children.  If called on","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":24245,"byte_end":24317,"line_start":630,"line_end":630,"column_start":5,"column_end":77}},{"value":"/ the root storage, recursively removes all of its children but not the","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":24322,"byte_end":24395,"line_start":631,"line_end":631,"column_start":5,"column_end":78}},{"value":"/ root storage itself (which cannot be removed).","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":24400,"byte_end":24450,"line_start":632,"line_end":632,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":25317,"byte_end":25334,"line_start":658,"line_end":658,"column_start":12,"column_end":29},"name":"set_storage_clsid","qualname":"<CompoundFile<F>>::set_storage_clsid","value":"pub fn set_storage_clsid<P: AsRef<Path>>(&mut Self, P, Uuid) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the CLSID for the storage object at the provided path.  (To get\n the current CLSID for a storage object, use\n `self.entry(path)?.clsid()`.)\n","sig":null,"attributes":[{"value":"/ Sets the CLSID for the storage object at the provided path.  (To get","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":25143,"byte_end":25215,"line_start":655,"line_end":655,"column_start":5,"column_end":77}},{"value":"/ the current CLSID for a storage object, use","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":25220,"byte_end":25267,"line_start":656,"line_end":656,"column_start":5,"column_end":52}},{"value":"/ `self.entry(path)?.clsid()`.)","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":25272,"byte_end":25305,"line_start":657,"line_end":657,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26548,"byte_end":26561,"line_start":693,"line_end":693,"column_start":12,"column_end":25},"name":"create_stream","qualname":"<CompoundFile<F>>::create_stream","value":"pub fn create_stream<P: AsRef<Path>>(&mut Self, P) -> io::Result<Stream<, F>>","parent":null,"children":[],"decl_id":null,"docs":" Creates and returns a new, empty stream object at the provided path.\n If a stream already exists at that path, it will be replaced by the new\n stream.  The parent storage object must already exist.\n","sig":null,"attributes":[{"value":"/ Creates and returns a new, empty stream object at the provided path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26321,"byte_end":26393,"line_start":690,"line_end":690,"column_start":5,"column_end":77}},{"value":"/ If a stream already exists at that path, it will be replaced by the new","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26398,"byte_end":26473,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ stream.  The parent storage object must already exist.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26478,"byte_end":26536,"line_start":692,"line_end":692,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26922,"byte_end":26939,"line_start":703,"line_end":703,"column_start":12,"column_end":29},"name":"create_new_stream","qualname":"<CompoundFile<F>>::create_new_stream","value":"pub fn create_new_stream<P: AsRef<Path>>(&mut Self, P)\n-> io::Result<Stream<, F>>","parent":null,"children":[],"decl_id":null,"docs":" Creates and returns a new, empty stream object at the provided path.\n Returns an error if a stream already exists at that path.  The parent\n storage object must already exist.\n","sig":null,"attributes":[{"value":"/ Creates and returns a new, empty stream object at the provided path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26717,"byte_end":26789,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/ Returns an error if a stream already exists at that path.  The parent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26794,"byte_end":26867,"line_start":701,"line_end":701,"column_start":5,"column_end":78}},{"value":"/ storage object must already exist.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":26872,"byte_end":26910,"line_start":702,"line_end":702,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":28888,"byte_end":28901,"line_start":755,"line_end":755,"column_start":12,"column_end":25},"name":"remove_stream","qualname":"<CompoundFile<F>>::remove_stream","value":"pub fn remove_stream<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Removes the stream object at the provided path.\n","sig":null,"attributes":[{"value":"/ Removes the stream object at the provided path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":28825,"byte_end":28876,"line_start":754,"line_end":754,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":30428,"byte_end":30442,"line_start":794,"line_end":794,"column_start":12,"column_end":26},"name":"set_state_bits","qualname":"<CompoundFile<F>>::set_state_bits","value":"pub fn set_state_bits<P: AsRef<Path>>(&mut Self, P, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the user-defined bitflags for the object at the provided path.\n (To get the current state bits for an object, use\n `self.entry(path)?.state_bits()`.)\n","sig":null,"attributes":[{"value":"/ Sets the user-defined bitflags for the object at the provided path.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":30244,"byte_end":30315,"line_start":791,"line_end":791,"column_start":5,"column_end":76}},{"value":"/ (To get the current state bits for an object, use","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":30320,"byte_end":30373,"line_start":792,"line_end":792,"column_start":5,"column_end":58}},{"value":"/ `self.entry(path)?.state_bits()`.)","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":30378,"byte_end":30416,"line_start":793,"line_end":793,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":31326,"byte_end":31331,"line_start":822,"line_end":822,"column_start":12,"column_end":17},"name":"touch","qualname":"<CompoundFile<F>>::touch","value":"pub fn touch<P: AsRef<Path>>(&mut Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the modified time for the object at the given path to now.  Has no\n effect when called on the root storage.\n","sig":null,"attributes":[{"value":"/ Sets the modified time for the object at the given path to now.  Has no","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":31191,"byte_end":31266,"line_start":820,"line_end":820,"column_start":5,"column_end":80}},{"value":"/ effect when called on the root storage.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":31271,"byte_end":31314,"line_start":821,"line_end":821,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":32269,"byte_end":32274,"line_start":846,"line_end":846,"column_start":12,"column_end":17},"name":"flush","qualname":"<CompoundFile<F>>::flush","value":"pub fn flush(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flushes all changes to the underlying file.\n","sig":null,"attributes":[{"value":"/ Flushes all changes to the underlying file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":32210,"byte_end":32257,"line_start":845,"line_end":845,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":42048,"byte_end":42054,"line_start":1049,"line_end":1049,"column_start":12,"column_end":18},"name":"Stream","qualname":"::Stream","value":"Stream {  }","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992}],"decl_id":null,"docs":" A stream entry in a compound file, much like a filesystem file.\n","sig":null,"attributes":[{"value":"/ A stream entry in a compound file, much like a filesystem file.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":41969,"byte_end":42036,"line_start":1048,"line_end":1048,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":42837,"byte_end":42840,"line_start":1079,"line_end":1079,"column_start":12,"column_end":15},"name":"len","qualname":"<Stream>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the current length of the stream, in bytes.\n","sig":null,"attributes":[{"value":"/ Returns the current length of the stream, in bytes.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":42770,"byte_end":42825,"line_start":1078,"line_end":1078,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43770,"byte_end":43777,"line_start":1106,"line_end":1106,"column_start":12,"column_end":19},"name":"set_len","qualname":"<Stream>::set_len","value":"pub fn set_len(&mut Self, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Truncates or extends the stream, updating the size of this stream to\n become `size`.","sig":null,"attributes":[{"value":"/ Truncates or extends the stream, updating the size of this stream to","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43227,"byte_end":43299,"line_start":1096,"line_end":1096,"column_start":5,"column_end":77}},{"value":"/ become `size`.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43304,"byte_end":43322,"line_start":1097,"line_end":1097,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43327,"byte_end":43330,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ If `size` is less than the stream's current size, then the stream will","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43335,"byte_end":43409,"line_start":1099,"line_end":1099,"column_start":5,"column_end":79}},{"value":"/ be shrunk.  If it is greater than the stream's current size, then the","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43414,"byte_end":43487,"line_start":1100,"line_end":1100,"column_start":5,"column_end":78}},{"value":"/ stream will be padded with zero bytes.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43492,"byte_end":43534,"line_start":1101,"line_end":1101,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43539,"byte_end":43542,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ Does not change the current read/write position within the stream,","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43547,"byte_end":43617,"line_start":1103,"line_end":1103,"column_start":5,"column_end":75}},{"value":"/ unless the stream is truncated to before the current position, in which","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43622,"byte_end":43697,"line_start":1104,"line_end":1104,"column_start":5,"column_end":80}},{"value":"/ case the position becomes the new end of the stream.","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43702,"byte_end":43758,"line_start":1105,"line_end":1105,"column_start":5,"column_end":61}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":55218,"byte_end":55227,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":58485,"byte_end":58494,"line_start":129,"line_end":129,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":59666,"byte_end":59675,"line_start":167,"line_end":167,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":71199,"byte_end":71204,"line_start":14,"line_end":14,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":72047,"byte_end":72052,"line_start":42,"line_end":42,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":72974,"byte_end":72979,"line_start":67,"line_end":67,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":74434,"byte_end":74439,"line_start":104,"line_end":104,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":75136,"byte_end":75141,"line_start":124,"line_end":124,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":76257,"byte_end":76262,"line_start":149,"line_end":149,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\color.rs","byte_start":78070,"byte_end":78075,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":81244,"byte_end":81253,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":89498,"byte_end":89507,"line_start":263,"line_end":263,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":90646,"byte_end":90655,"line_start":297,"line_end":297,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\direntry.rs","byte_start":105438,"byte_end":105446,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119407,"byte_end":119412,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":122109,"byte_end":122116,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":123253,"byte_end":123260,"line_start":145,"line_end":145,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\header.rs","byte_start":128201,"byte_end":128207,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":138380,"byte_end":138393,"line_start":30,"line_end":30,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":142164,"byte_end":142177,"line_start":146,"line_end":146,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":142827,"byte_end":142840,"line_start":168,"line_end":168,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":153995,"byte_end":154004,"line_start":12,"line_end":12,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":154772,"byte_end":154781,"line_start":35,"line_end":35,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":156323,"byte_end":156332,"line_start":73,"line_end":73,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":157029,"byte_end":157038,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":158165,"byte_end":158174,"line_start":119,"line_end":119,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\objtype.rs","byte_start":159956,"byte_end":159963,"line_start":14,"line_end":14,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":166905,"byte_end":166912,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":167540,"byte_end":167547,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":168934,"byte_end":168941,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":170050,"byte_end":170056,"line_start":122,"line_end":122,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":170834,"byte_end":170840,"line_start":146,"line_end":146,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":171274,"byte_end":171280,"line_start":159,"line_end":159,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":171793,"byte_end":171799,"line_start":176,"line_end":176,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":172683,"byte_end":172693,"line_start":205,"line_end":205,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185183,"byte_end":185190,"line_start":14,"line_end":14,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3900,"byte_end":3912,"line_start":108,"line_end":108,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8147,"byte_end":8159,"line_start":222,"line_end":222,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9079,"byte_end":9091,"line_start":246,"line_end":246,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":17831,"byte_end":17843,"line_start":467,"line_end":467,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":42308,"byte_end":42314,"line_start":1060,"line_end":1060,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43207,"byte_end":43213,"line_start":1095,"line_end":1095,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":44437,"byte_end":44443,"line_start":1127,"line_end":1127,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":45141,"byte_end":45147,"line_start":1149,"line_end":1149,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":45445,"byte_end":45451,"line_start":1160,"line_end":1160,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":48455,"byte_end":48461,"line_start":1235,"line_end":1235,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":49380,"byte_end":49386,"line_start":1262,"line_end":1262,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":49707,"byte_end":49718,"line_start":1276,"line_end":1276,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":55218,"byte_end":55227,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":58485,"byte_end":58494,"line_start":129,"line_end":129,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\alloc.rs","byte_start":59666,"byte_end":59675,"line_start":167,"line_end":167,"column_start":23,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":71199,"byte_end":71204,"line_start":14,"line_end":14,"column_start":13,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":72047,"byte_end":72052,"line_start":42,"line_end":42,"column_start":19,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":72974,"byte_end":72979,"line_start":67,"line_end":67,"column_start":27,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":74434,"byte_end":74439,"line_start":104,"line_end":104,"column_start":22,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":205},"to":{"krate":1,"index":4474}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":75136,"byte_end":75141,"line_start":124,"line_end":124,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":205},"to":{"krate":1,"index":4399}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\chain.rs","byte_start":76257,"byte_end":76262,"line_start":149,"line_end":149,"column_start":37,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":205},"to":{"krate":1,"index":4456}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\color.rs","byte_start":78070,"byte_end":78075,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":81244,"byte_end":81253,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":89498,"byte_end":89507,"line_start":263,"line_end":263,"column_start":15,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\directory.rs","byte_start":90646,"byte_end":90655,"line_start":297,"line_end":297,"column_start":23,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\direntry.rs","byte_start":105438,"byte_end":105446,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":119407,"byte_end":119412,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1067},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":122109,"byte_end":122116,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\entry.rs","byte_start":123253,"byte_end":123260,"line_start":145,"line_end":145,"column_start":23,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":481},"to":{"krate":2,"index":7829}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\header.rs","byte_start":128201,"byte_end":128207,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":138380,"byte_end":138393,"line_start":30,"line_end":30,"column_start":9,"column_end":22},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":142164,"byte_end":142177,"line_start":146,"line_end":146,"column_start":15,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minialloc.rs","byte_start":142827,"byte_end":142840,"line_start":168,"line_end":168,"column_start":23,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":153995,"byte_end":154004,"line_start":12,"line_end":12,"column_start":13,"column_end":22},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":154772,"byte_end":154781,"line_start":35,"line_end":35,"column_start":34,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":156323,"byte_end":156332,"line_start":73,"line_end":73,"column_start":22,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":4474}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":157029,"byte_end":157038,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":4399}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\minichain.rs","byte_start":158165,"byte_end":158174,"line_start":119,"line_end":119,"column_start":44,"column_end":53},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":4456}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\objtype.rs","byte_start":159956,"byte_end":159963,"line_start":14,"line_end":14,"column_start":6,"column_end":13},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":166905,"byte_end":166912,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":167540,"byte_end":167547,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":168934,"byte_end":168941,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":170050,"byte_end":170056,"line_start":122,"line_end":122,"column_start":13,"column_end":19},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":170834,"byte_end":170840,"line_start":146,"line_end":146,"column_start":28,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":4399}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":171274,"byte_end":171280,"line_start":159,"line_end":159,"column_start":30,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":4456}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":171793,"byte_end":171799,"line_start":176,"line_end":176,"column_start":28,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":4474}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\sector.rs","byte_start":172683,"byte_end":172693,"line_start":205,"line_end":205,"column_start":6,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\internal\\version.rs","byte_start":185183,"byte_end":185190,"line_start":14,"line_end":14,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":3900,"byte_end":3912,"line_start":108,"line_end":108,"column_start":9,"column_end":21},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":8147,"byte_end":8159,"line_start":222,"line_end":222,"column_start":15,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":9079,"byte_end":9091,"line_start":246,"line_end":246,"column_start":22,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":17831,"byte_end":17843,"line_start":467,"line_end":467,"column_start":30,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":42308,"byte_end":42314,"line_start":1060,"line_end":1060,"column_start":13,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":981},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":43207,"byte_end":43213,"line_start":1095,"line_end":1095,"column_start":34,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":981},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":44437,"byte_end":44443,"line_start":1127,"line_end":1127,"column_start":38,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":981},"to":{"krate":1,"index":4481}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":45141,"byte_end":45147,"line_start":1149,"line_end":1149,"column_start":35,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":981},"to":{"krate":1,"index":4399}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":45445,"byte_end":45451,"line_start":1160,"line_end":1160,"column_start":35,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":981},"to":{"krate":1,"index":4474}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":48455,"byte_end":48461,"line_start":1235,"line_end":1235,"column_start":44,"column_end":50},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":981},"to":{"krate":1,"index":4456}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":49380,"byte_end":49386,"line_start":1262,"line_end":1262,"column_start":22,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":981},"to":{"krate":2,"index":3258}},{"span":{"file_name":"C:\\Users\\axelv\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cfb-0.6.1\\src\\lib.rs","byte_start":49707,"byte_end":49718,"line_start":1276,"line_end":1276,"column_start":45,"column_end":56},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1031},"to":{"krate":0,"index":1028}}]}